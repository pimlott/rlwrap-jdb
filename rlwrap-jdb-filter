#!/usr/bin/perl

# Although meant to be called via rlwrap-jdb, this filter should still work
# on its own with all features.

use strict;
use warnings;

use FindBin;
use Getopt::Long;

use lib ($ENV{RLWRAP_FILTERDIR} or '.');
use RlwrapFilter;

my $redirfilename = '';
my $redirfh = undef;
my $redirmode = '';

my $filter = RlwrapFilter->new();
my $name = $filter->name();

#
# Debugging
#
my $debug = 0;
my $debugfile = '/tmp/debug.txt';
my $debugfh = undef;
# stick the following in the code where necesary
# if (defined($debugfh)) {print $debugfh "Something happened\n"}

if ($debug) {
   use IO::Handle;
   open($debugfh, '>', $debugfile) or die("$!\n");
   $debugfh->autoflush;
}



my $usage = <<EOF;
Usage:
  rlwrap -z '$name [OPT]...' <command>
Handy aliases, command repetition, and completion for jdb.
Options:
  --find-breakpoints    Find breakpoints for completion, saving to
                        --breakpoints-file if given.  CLASSPATH must be set.
  --breakpoints-file F  File containing breakpoints, generated with
                        list-java-breakpoints or --find-breakpoints.
  --main-class C        The main class to debug.  This is not essential, and
                        $name can often figure it out itself.
EOF

$filter->help_text($usage);

my($find_breakpoints, $breakpoints_file, $main_class);
GetOptions(
    'find-breakpoints'   => \$find_breakpoints,
    'breakpoints-file=s' => \$breakpoints_file,
    'main-class=s'       => \$main_class,
) or die("$usage\n");

my(@breakpoints, $bp_in_fh, $bp_out_fh);
if (defined($find_breakpoints)) {
    open($bp_in_fh, '-|', "$FindBin::Bin/list-java-breakpoints")
        or die("Problem running list-java-breakpoints: $!\n");
    open($bp_out_fh, '>', $breakpoints_file)
        or die("Problem opening breakpoints-file $breakpoints_file: $!\n")
        if defined($breakpoints_file);
} elsif (defined($breakpoints_file)) {
    open($bp_in_fh, '<', $breakpoints_file)
        or die("Problem opening breakpoints-file $breakpoints_file: $!\n");
}
if (defined($bp_in_fh)) {
    while (<$bp_in_fh>) {
        print $bp_out_fh $_ if defined($bp_out_fh);
        chomp;
        push(@breakpoints, $_);
    }
    close($bp_in_fh);
    close($bp_out_fh) if defined($bp_out_fh);
}

if (!defined($main_class)) {
    # Heuristically try to identify the main class.
    foreach my $arg ($filter->command_line) {
        next unless $arg =~ /^[a-zA-Z.\$]+$/;
        my(@parts) = split(/\./, $arg);
        if ($parts[$#parts] =~ /^[A-Z]/) {
            $main_class = $arg;
            last;
        }
    }
}

my($vm_running, $current_line, $raw_line, $pager_fd);
$raw_line = '';
my $repeat_expanded_line = 'cont';
my $current_class = $main_class;

$filter->input_handler(sub {
    my($line) = @_;
    $raw_line = $line;
    my($expanded_line) = expand($line);
    $repeat_expanded_line = $expanded_line
        if $expanded_line =~ /^\s*(?:next|step|step up|cont)\s*$/;

    # hacktastic file redirection support
    if ($expanded_line =~ /^(\s*[\w\s\d\$_\/\\:\.\-\(\)]*\s*)(>{1,2})\s*["']{1}([\w\d\.:_\-\\\/ \/]+)["']{1}\s*$/) {
      $expanded_line = $1;
      $redirmode = $2;
      $redirfilename = $3;
    } elsif ($expanded_line =~ /^(\s*[\w\s\d\$_\/\\:\.\-\(\)]*\s*)(>{1,2})\s*([\w\d\.:_\-\\\/\/]+)\s*$/) {
      $expanded_line = $1;
      $redirmode = $2;
      $redirfilename = $3;
    }

    if ($expanded_line =~ /^\s*(?:help|\?)\s*/) {
        open($pager_fd, '|-', 'less') or die $!;
        print $pager_fd <<EOF;
** rlwrap-jdb shortcuts and additional commands **
[command] [>|>>] [file]   -- redirect command output to file
runfile [file]            -- run a sequence of commands from file
                             (newline-separated)
b <class id>.<method>[(argument_type,...)]
                          -- set a breakpoint in a method
b <class id>:<line>       -- set a breakpoint at a line
b                         -- set a breakpoint at the current line
d <breakpoint>            -- clear a breakpoint in a method or at a line
B <breakpoint>            -- clear a breakpoint in a method or at a line
s                         -- step (starts VM if not running)
r                         -- step up
n                         -- next (starts VM if not running)
c                         -- cont (starts VM if not running)
p <expr>                  -- print
x <expr>                  -- dump
bt                        -- where
T                         -- where
l [line number|method]    -- list
h                         -- help
q                         -- quit

Hit return to repeat the last next, step, step up, or cont.

EOF
    # run file support
    } elsif ($expanded_line =~ /^\s*runfile\s+["']*[\w\d\.:_\-\\\/ \/]+["']*\s*$/) {
      # filename surrounded by quotes, including spaces
      $expanded_line =~ /^\s*runfile\s+["']{1}([\w\d\.:_\-\\\/ \/]+)["']{1}\s*$/;
      my $inputfile = $1;
      if (! $inputfile) {
        # filename without quotes, no spaces
        $expanded_line =~ /^\s*runfile\s+([\w\d\.:_\-\\\/\/]+)\s*$/;
        $inputfile = $1;
      }
      if (-r $inputfile) {
        open my $handle, '<', $inputfile;
        chomp(my @commands = <$handle>);
        close $handle;
        $expanded_line = multiple_commands(@commands);
      } else {
        $expanded_line = '';
      }

    } elsif ($expanded_line =~ /^\s*cont\s*$/) {
        $expanded_line = 'run' if !$vm_running;

    } elsif ($expanded_line =~ /^\s*(?:next|step)\s*$/) {
        if (!$vm_running) {
            if (!defined($main_class)) {
                $expanded_line = command_error(<<EOF);
Don't know the main class to step into; try passing --main-class C.
EOF
            } else {
                $expanded_line = multiple_commands(
                    "stop in $main_class.main(java.lang.String[])",
                    'run');
            }
        }
    }
    if ($redirfilename) {
      if (filenameTester($redirfilename)) {
        open($redirfh, $redirmode, $redirfilename) or die $!;
      }
      $redirfilename = '';
    }

    $expanded_line;
});

# used by command_error and multiple_commands, when we need to control what
# is printed after the normal echo.  They are subs so we can stream.
my @command_output_subs = ();

# Simply returning multiple newline-separated commands isn't handled ideally
# by RlwrapFilter: all after the first are echoed immediately.  Work around
# it with cloak_and_dagger and take care of printing the output ourselves.
sub multiple_commands {
    @command_output_subs = map {
        my $cmd = $_;
        sub { cloak_and_dagger($cmd) }
    } @_;
    ''
}

sub command_error {
    my($err) = @_;
    @command_output_subs = (sub { $err });
    ''
}

$filter->echo_handler(sub {
    $filter->send_output_oob("$raw_line");
    foreach (@command_output_subs) {
        my $r = $_->();
        chomp($r);
        if (defined($redirfh)) {
          print $redirfh $r . "\n\n";
        } else {
          $filter->send_output_oob("\n$r");
        }
    }
    @command_output_subs = ();
    ''
});

# this sends us the prompt too, unless in patient mode
$filter->output_handler(sub {
    my($s) = @_;
    if (defined($redirfh)) {
      print $redirfh $s;
      '';
    } elsif (defined($pager_fd)) {
        print $pager_fd $s;
        ''
    } else {
        parse_output($s);
        $s;
    }
});

# jdb is pretty stupid and sometimes outputs things like "VM Started:"
# without printing a new prompt, so rlwrap thinks that's the prompt.  So we
# check to see whether it looks like a prompt and if not treat it like
# output.

# What is the number in the prompt??
my $jdb_prompt_re = qr/^(?:>|\S+\[\d+\])\s*\z/m;

$filter->prompt_handler(sub {
    my($prompt) = @_;
    if (defined($redirfh)) {
      close($redirfh) or die $!;
      $redirfh = undef;
    }
    if (defined($pager_fd)) {
        close($pager_fd) or die $!;
        $pager_fd = undef;
    } elsif ($prompt !~ /^$jdb_prompt_re/) {
        parse_output($prompt);
        # don't reject the prompt--we might get nothing more
    }
    $prompt;
});

sub parse_output {
    my($s) = @_;
    $vm_running = 1 if $s =~ /^VM Started:/m;
    # parse the current class
    if ($s =~ /: "thread=.*?", ([a-zA-Z.\$]+)\.[a-zA-Z]+\(\), line=(\d+)/) {
        $current_class = $1;
        $current_line = $2;
    }
}

$filter->completion_handler(sub {
    my($l, $prefix, @completions) = @_;
    if ($l =~ /^\s*(?:p|print|x|dump)\s+(\S*)/) {
        push(@completions, prefix_filter($prefix, get_locals()));
        push(@completions, prefix_filter($prefix, get_fields($current_class)))
            if defined($current_class);
    } elsif ($l =~ /^\s*(?:b|stop at|stop in)\s+(\S*)/) {
        # try to check that they are completing in the break arg
        my $break_arg = $1;
        if ($prefix eq $break_arg) {
            push(@completions,
                $prefix eq ''
                    ? defined($current_class)
                        ? breakpoint_completions(\@breakpoints, $current_class)
                        : ()
                    : breakpoint_completions(\@breakpoints, $prefix));
        }
    }
    @completions;
});

$filter->run();
if (defined($debugfh)) { close($debugfh) }
exit;

sub breakpoint_completions {
    my($breakpoints, $prefix) = @_;
    my($min) = breakpoints_search($breakpoints, sub {
        my($breakpoint) = @_;
        return 0 if $breakpoint eq $prefix;
        return 2 if $breakpoint lt $prefix;
        return -1 if substr($breakpoint, 0, length($prefix)) eq $prefix;
        return -2 if $breakpoint gt $prefix;
    });
    return if !defined($min);
    my($max) = breakpoints_search($breakpoints, sub {
        my($breakpoint) = @_;
        return 0 if $breakpoint eq $prefix;
        return 2 if $breakpoint lt $prefix;
        return 1 if substr($breakpoint, 0, length($prefix)) eq $prefix;
        return -2 if $breakpoint gt $prefix;
    });
    @$breakpoints[$min..$max];
}

sub breakpoints_search {
    my($breakpoints, $cmp) = @_;
    my $min = 0;
    my $max = $#$breakpoints;
    my $mid = int(($min + $max) / 2);
    while ($min <= $max) {
        my $r = $cmp->($breakpoints->[$mid]);
        if      ($r == -2) {  # definitely go lower
            $max = $mid - 1;
            $mid = int(($min + $max) / 2);
        } elsif ($r == -1) {  # maybe go lower
            return $min if $min == $max;
            $max = $mid;
            $mid = int(($min + $max) / 2);
        } elsif ($r == 0) {
            return $mid;
        } elsif ($r == 1) {   # maybe go higher
            return $min if $min == $max;
            $min = $mid;
            $mid = int(($min + $max + 1) / 2);
        } elsif ($r == 2) {   # definitely go higher
            $min = $mid + 1;
            $mid = int(($min + $max + 1) / 2);
        }
    }
    undef;
}

sub expand {
    my($line) = @_;
    if ($line =~ /^\s*$/) {
        $repeat_expanded_line // '';
    } else {
        $line =~ s/^\s*(\w+)(.*)/expand_alias($1,$2) . $2/e;
        $line;
    }
}

my(%aliases);
BEGIN {
    %aliases = (
        d  => 'clear',
        B  => 'clear',
        s  => 'step',
        r  => 'step up',
        n  => 'next',
        c  => 'cont',
        p  => 'print',
        x  => 'dump',
        bt => 'where',
        T  => 'where',
        l  => 'list',
        h  => 'help',
        q  => 'quit',
    );
}
sub expand_alias {
    my($s, $r) = @_;
    if ($s eq 'b') {
        $r =~ /^\s*$/
            ? defined($current_line)
                ? "stop at $current_class:$current_line"
                : command_error('No current line to set breakpoint at.') :
        $r =~ /:/
            ? 'stop at'
            : 'stop in';
    } else {
        $aliases{$s} // $s;
    }
}

sub prefix_filter {
    my($prefix, @ss) = @_;
    grep { substr($_, 0, length($prefix)) eq $prefix; } @ss;
}

sub get_locals {
    parse_locals(cloak_and_dagger('locals'));
}
sub parse_locals {
    my($s) = @_;
    $s =~ /^(\w+) = /mg;
}

sub get_fields {
    my($class) = @_;
    parse_fields(cloak_and_dagger("fields $class"));
}
sub parse_fields {
    my($s) = @_;
    $s =~ /^[a-zA-Z_.]+ (\w+)/mg;
}

# Work around awkwardness in how ->cloak_and_dagger handles prompts.
sub cloak_and_dagger {
    my($cmd) = @_;
    my $output = $filter->cloak_and_dagger($cmd, ' ', 40);
    $output =~ s/$jdb_prompt_re//;
    parse_output($output);
    $output;
}

# tests to see if provided string value is a valid writable file name (more or less)
sub filenameTester {
  my $input = $_[0];
  my $pat = '^[\d\w\.\-_ :\\' . sep() . ']+$';
  if ($input !~ qr/$pat/) {
    # invalid, contains characters outside of the filepath seperator a-z 0-9 . : - _ and space
    return 0;
  }
  my @bn = split(sep(), $input);
  my $fn = pop(@bn);
  my $dn = join('/', @bn);
  if (! $dn) {$dn = '.'} # if file path doesnt include directory info, set to pwd
  if ( (! -w $dn) || (! -d $dn) ) {
    # invalid, if directory does not exist or is not writable
    return 0;
  } else {
    return 1;
  }
}

# provides correct file path seperator depending on OS
sub sep() {
  if ("$^O" =~ /MSWin.*/) {
    return '\\';
  }
  else
  {
    return '/';
  }
}
